// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

option java_package = "com.amazonaws.iot.autobahn.schemas";
package Aws.IoTFleetWise.Schemas.Commands;

/*
 * A command is used to set actuator's state
 */
message CommandRequest {

    /*
     * CommandId is the identifier for the command requested to be executed on edge.
     */
    string command_id = 16;

    /*
     * Command timeout in milliseconds
     */
    uint64 timeout_ms = 17;

    oneof Command {
        ActuatorCommand actuator_command = 18;
        LastKnownStateCommand last_known_state_command  = 19;
    }

    /*
     * Timestamp when the command was issued (in milliseconds since epoch)
     */
    uint64 issued_timestamp_ms = 20;
}

/*
 * Command that sends a value to an actuator
 *
 * Actuators are identified by a signal ID and the decoder manifest will be used to find out how the
 * value should be encoded and how to send it to the actuator.
 */
message ActuatorCommand {
    /*
     * Unique integer identifier of the signal generated by Cloud Designer
     */
     uint32 signal_id = 1;

     /*
      * Synchronization ID of the required decoder manifest for this command
      */
     string decoder_manifest_sync_id = 2;

     /*
      * Data types of physical signal values.
      */
     oneof SignalValue {

         double double_value = 3;

         bool boolean_value = 4;

         sint32 int8_value = 5;

         uint32 uint8_value = 6;

         sint32 int16_value = 7;

         uint32 uint16_value = 8;

         sint32 int32_value = 9;

         uint32 uint32_value = 10;

         sint64 int64_value = 11;

         uint64 uint64_value = 12;

         float float_value = 13;

         /*
          * An UTF-8 encoded or 7-bit ASCII string
          */
         string string_value = 14;
     }
}

/*
 * Command to operate on state templates
 *
 * This can change a state template's status or request data associated to a state template.
 * Any state template referenced in this command should have been already deployed.
 */
message LastKnownStateCommand {
    repeated StateTemplateInformation state_template_information = 1;

    message StateTemplateInformation {
        /*
         * This ID uniquely identifies a state template. Please note that it is not necessarily the
         * same ID as provided by the Cloud APIs since it can contain additional prefix or suffix, or
         * even be random. It just needs to match a state template that has been received by FWE.
         */
        string state_template_sync_id = 1;

        oneof Operation {
            ActivateOperation activate_operation = 2;
            DeactivateOperation deactivate_operation = 3;
            FetchSnapshotOperation fetch_snapshot_operation = 4;
        }
    }

    /*
     * Activates the state template
     *
     * The associated state template will start collecting data following the rules defined in the
     * state template definition until is it explicitly deactivated or when the auto-deactivation
     * time passes.
     *
     * The first message will contain all signals (similar to a FetchSnapshotOperation). Then after this initial
     * message, data will be collected following the update strategy defined in the state template.
     */
    message ActivateOperation {
        /*
         * Automatically deactivates the state template after this time
         *
         * This time is relative to when FWE receives the command.
         *
         * If set to zero or omitted, the state template won't be auto-deactivated.
         */
        uint32 deactivate_after_seconds = 1;
    }

    /*
     * Deactivates the state template
     *
     * Stops the collection of data associated to a state template. It will immediately be deactivated
     * regardless whether auto-deactivation was enabled during activation.
     */
    message DeactivateOperation {}

    /*
     * Request a single snapshot
     *
     * This requests a single snapshot containing all data associated to a state template.
     * The data will be sent just once, regardless of whether the state template is currently
     * active or not.
     * After the data is sent, if the state template is active it will continue collecting data
     * normally.
     */
    message FetchSnapshotOperation {}
}
