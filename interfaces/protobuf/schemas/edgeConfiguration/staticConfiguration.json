{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "id": "http://aws-iot-automotive.com/edgeConfiguration",
  "type": "object",
  "additionalProperties": false,
  "title": "IoTFleetWise Static Configuration Attributes",
  "description": "The root schema for FWE Static Configuration JSON",
  "properties": {
    "version": {
      "type": "string",
      "description": "Schema Version"
    },
    "networkInterfaces": {
      "description": "HW network interface information for decoding signals",
      "type": "array",
      "additionalProperties": false,
      "items": {
        "anyOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "canInterface": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "interfaceName": {
                    "type": "string",
                    "description": "Interface name for CAN channel"
                  },
                  "protocolName": {
                    "type": "string",
                    "description": "Protocol used- CAN or CAN FD"
                  },
                  "protocolVersion": {
                    "type": "string",
                    "description": "Protocol version used- CAN 2.0A, 2.0B"
                  },
                  "timestampType": {
                    "type": "string",
                    "description": "Defines which timestamp type should be used: Software, Hardware or Polling. Default is Software"
                  }
                },
                "required": ["interfaceName", "protocolName", "protocolVersion"]
              },
              "interfaceId": {
                "type": "string",
                "description": "Every network interface is associated with a unique ID that must match the interface ID sent by the cloud in the decoder manifest"
              },
              "type": {
                "type": "string",
                "description": "Specifies the interface type- CAN, OBD, ROS2 etc"
              }
            },
            "required": ["canInterface", "interfaceId", "type"]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "obdInterface": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "interfaceName": {
                    "type": "string",
                    "description": "CAN Interface Name where the OBD stack on the ECU is running"
                  },
                  "obdStandard": {
                    "type": "string",
                    "description": "OBD Standard (eg. J1979 or Enhanced (for advanced standards))"
                  },
                  "pidRequestIntervalSeconds": {
                    "type": "integer",
                    "description": "Interval used to schedule PID requests (in seconds)"
                  },
                  "dtcRequestIntervalSeconds": {
                    "type": "integer",
                    "description": "Interval  used to schedule DTC requests (in seconds)"
                  },
                  "broadcastRequests": {
                    "type": "boolean",
                    "description": "Specifies whether OBD requests should be sent in broadcast (functional) mode, rather than the unicast (physical) mode"
                  }
                },
                "required": [
                  "interfaceName",
                  "obdStandard",
                  "pidRequestIntervalSeconds",
                  "dtcRequestIntervalSeconds",
                  "broadcastRequests"
                ]
              },
              "interfaceId": {
                "type": "string",
                "description": "Every network interface is associated with a unique ID that must match the interface ID sent by the cloud in the decoder manifest"
              },
              "type": {
                "type": "string",
                "description": "Specifies the interface type- CAN, OBD, ROS2 etc"
              }
            },
            "required": ["obdInterface", "interfaceId", "type"]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "ros2Interface": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "subscribeQueueLength": {
                    "type": "integer",
                    "description": "For every topic this ROS2 Interface will subscribe subscribeQueueLength will be used to construct QoS. This means how many historic messages can be queued before being replaced"
                  },
                  "executorThreads": {
                    "type": "integer",
                    "description": "How many threads will be used for the ROS2 MultiThreadedExecutor"
                  },
                  "introspectionLibraryCompare": {
                    "type": "string",
                    "enum": ["ErrorAndFail", "Warn", "Ignore"],
                    "description": "The ROS2 introspection library provides type information at compile time. This can differ from the type information received from cloud. A difference can lead to misinterpreted data on edge and in the cloud. This will only detect type differences but not renames of fields. This field defines how to handle a difference: ErrorAndFail, Warn or Ignore."
                  }
                },
                "required": [
                  "subscribeQueueLength",
                  "executorThreads",
                  "introspectionLibraryCompare"
                ]
              },
              "interfaceId": {
                "type": "string",
                "description": "Every network interface is associated with a unique ID that must match the interface ID sent by the cloud in the decoder manifest"
              },
              "type": {
                "type": "string",
                "enum": ["ros2Interface"]
              }
            },
            "required": ["ros2Interface", "interfaceId", "type"]
          }
        ]
      }
    },
    "staticConfig": {
      "description": "Static Configuration Attributes",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "bufferSizes": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "dtcBufferSize": {
              "type": "integer",
              "description": "(Deprecated) decodedSignalsBufferSize is used for all signals."
            },
            "decodedSignalsBufferSize": {
              "type": "integer",
              "description": "Max size of the buffer shared between data collection module (Collection Engine) and Network Channel Consumer for OBD and CAN signals, raw CAN frames, active DTCs, and Vision System Data. This is a multiple producer single consumer buffer."
            },
            "rawCANFrameBufferSize": {
              "type": "integer",
              "description": "(Deprecated) decodedSignalsBufferSize is used for all signals."
            }
          },
          "required": ["decodedSignalsBufferSize"]
        },
        "threadIdleTimes": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "inspectionThreadIdleTimeMs": {
              "type": "integer",
              "description": "Sleep time for inspection engine thread if no new data is available (in milliseconds)"
            },
            "socketCANThreadIdleTimeMs": {
              "type": "integer",
              "description": "Sleep time for CAN interface if no new data is available (in milliseconds)"
            },
            "canDecoderThreadIdleTimeMs": {
              "type": "integer",
              "description": "Sleep time for CAN decoder thread if no new data is available (in milliseconds)"
            }
          },
          "required": [
            "inspectionThreadIdleTimeMs",
            "socketCANThreadIdleTimeMs",
            "canDecoderThreadIdleTimeMs"
          ]
        },
        "persistency": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "persistencyPath": {
              "type": "string",
              "description": "Local storage path to persist collectionScheme, decoder manifest and data snapshot"
            },
            "persistencyPartitionMaxSize": {
              "type": "integer",
              "description": "Maximum size allocated for persistency (Bytes)"
            },
            "persistencyUploadRetryIntervalMs": {
              "type": "integer",
              "description": "Interval to wait before retrying to upload persisted signal data (in milliseconds). After successfully uploading, the persisted signal data will be cleared. Only signal data that could not be uploaded will be persisted. Defaults to 10 seconds."
            }
          },
          "required": ["persistencyPath", "persistencyPartitionMaxSize"]
        },
        "internalParameters": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "readyToPublishDataBufferSize": {
              "type": "integer",
              "description": "Size of the buffer used for storing ready to publish, filtered data"
            },
            "systemWideLogLevel": {
              "type": "string",
              "description": "Set log level severity- Trace, Info, Warning, Error"
            },
            "logColor": {
              "type": "string",
              "enum": ["Auto", "Yes", "No"],
              "description": "Whether the logs should be colored. Default to auto."
            },
            "metricsCyclicPrintIntervalMs": {
              "type": "string",
              "description": "Sets the interval in milliseconds how often the application metrics should be printed to stdout. Default 0 means never"
            },
            "maximumAwsSdkHeapMemoryBytes": {
              "type": "integer",
              "description": "Set the maximum AWS SDK heap memory bytes. Default to 10000000"
            }
          },
          "required": ["readyToPublishDataBufferSize", "systemWideLogLevel"]
        },
        "publishToCloudParameters": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "maxPublishMessageCount": {
              "type": "integer",
              "description": "Maximum messages that can be published to the cloud as one payload"
            },
            "collectionSchemeManagementCheckinIntervalMs": {
              "type": "integer",
              "description": "Time interval between collectionScheme checkins( in milliseconds )"
            }
          },
          "required": ["maxPublishMessageCount", "collectionSchemeManagementCheckinIntervalMs"]
        },
        "mqttConnection": {
          "type": "object",
          "description": "Currently all primitive data types will be ingested over MQTT",
          "additionalProperties": false,
          "properties": {
            "endpointUrl": {
              "type": "string",
              "description": "AWS account's IoT device endpoint"
            },
            "clientId": {
              "type": "string",
              "description": "The ID that uniquely identifies this device in the AWS Region"
            },
            "collectionSchemeListTopic": {
              "type": "string",
              "description": "Control Plane publishes to this Collection Scheme, vehicle subscribes"
            },
            "decoderManifestTopic": {
              "type": "string",
              "description": "Control Plane publishes to this Decoder Manifest CollectionScheme, vehicle subscribes"
            },
            "canDataTopic": {
              "type": "string",
              "description": "Topic for sending collected data to cloud"
            },
            "checkinTopic": {
              "type": "string",
              "description": "Topic for sending checkins to cloud"
            },
            "certificateFilename": {
              "type": "string",
              "description": "The path to the device's certificate file"
            },
            "certificate": {
              "type": "string",
              "description": "The device's certificate"
            },
            "privateKeyFilename": {
              "type": "string",
              "description": "The path to the device's private key file that was created with its certificate file"
            },
            "privateKey": {
              "type": "string",
              "description": "The device's private key that was created with its certificate"
            },
            "rootCAFilename": {
              "type": "string",
              "description": "The path to the root CA certificate file (optional)"
            },
            "rootCA": {
              "type": "string",
              "description": "The root CA certificate (optional)"
            },
            "connectionType": {
              "type": "string",
              "enum": ["iotCore", "iotGreengrassV2"],
              "description": "Choose the connection module. Default to iotCore"
            }
          },
          "required": [
            "collectionSchemeListTopic",
            "decoderManifestTopic",
            "canDataTopic",
            "checkinTopic"
          ],
          "anyOf": [
            {
              "properties": {
                "connectionType": { "const": "iotCore" }
              },
              "required": ["endpointUrl", "clientId"],
              "oneOf": [
                {
                  "required": ["certificateFilename", "privateKeyFilename"]
                },
                {
                  "required": ["certificate", "privateKey"]
                }
              ]
            },
            {
              "properties": {
                "connectionType": { "const": "iotGreengrassV2" }
              }
            },
            {
              "required": ["endpointUrl", "clientId"],
              "oneOf": [
                {
                  "required": ["certificateFilename", "privateKeyFilename"]
                },
                {
                  "required": ["certificate", "privateKey"]
                }
              ]
            }
          ]
        },
        "credentialsProvider": {
          "type": "object",
          "additionalProperties": false,
          "description": "To access APIs directly over HTTP the AWS IoT Core Credential Provider is used to get the credentials over MQTT. If only MQTT is used for ingesting data this section is not needed",
          "properties": {
            "endpointUrl": {
              "type": "string",
              "description": "AWS IoT Core Credential Provider endpoint to use"
            },
            "roleAlias": {
              "type": "string",
              "description": "This role alias will be used to access APIs"
            }
          },
          "required": ["roleAlias", "endpointUrl"]
        },
        "s3Upload": {
          "type": "object",
          "additionalProperties": false,
          "description": "Configuration parameters for S3 upload",
          "properties": {
            "maxEnvelopeSize": {
              "type": "integer",
              "description": "Max size of envelope (group of collected messages) for S3 upload in bytes"
            },
            "maxConnections": {
              "type": "integer",
              "description": "Specifies the maximum number of HTTP connections to a single S3 server"
            },
            "multipartSize": {
              "type": "integer",
              "description": "Size of part for S3 multipart upload in bytes. S3 limitation is 5 MiB to 5 GiB"
            }
          },
          "required": ["maxEnvelopeSize", "maxConnections", "multipartSize"]
        },
        "visionSystemDataCollection": {
          "type": "object",
          "additionalProperties": false,
          "description": "Configuration parameters for Vision System Data collection",
          "properties": {
            "rawDataBuffer": {
              "type": "object",
              "additionalProperties": false,
              "description": "Configuration parameters for raw data buffer used to store samples of complex signals",
              "properties": {
                "maxSize": {
                  "type": "integer",
                  "description": "Size (bytes) of memory allocated for raw data buffer manager"
                },
                "reservedSizePerSignal": {
                  "type": "integer",
                  "description": "Size (bytes) of memory that will be reserved for each signal. This won't be available to other signals, even if it is unused."
                },
                "maxSamplesPerSignal": {
                  "type": "integer",
                  "description": "Max number of samples that will be stored in the raw data buffer for each signal"
                },
                "maxSizePerSample": {
                  "type": "integer",
                  "description": "Max size (bytes) of memory that can be used by a single sample. Larger samples will be discarded."
                },
                "maxSizePerSignal": {
                  "type": "integer",
                  "description": "Max size (bytes) of memory that can be used for each signal"
                },
                "overridesPerSignal": {
                  "type": "array",
                  "description": "List of config overrides for specific signals",
                  "additionalProperties": false,
                  "items": {
                    "type": "object",
                    "description": "Configuration parameters for raw data buffer that should be applied to a specific signal",
                    "additionalProperties": false,
                    "properties": {
                      "interfaceId": {
                        "type": "string",
                        "description": "That is the interfaceId that is associated to the signal. Together with messageId, it uniquely identifies this signal."
                      },
                      "messageId": {
                        "type": "string",
                        "description": "This is the messageId passed in the decoder manifest. Together with interfaceId, it uniquely identifies this signal."
                      },
                      "reservedSize": {
                        "type": "integer",
                        "description": "Size (bytes) of memory that will be reserved for this signal. This won't be available to other signals, even if it is unused."
                      },
                      "maxSamples": {
                        "type": "integer",
                        "description": "Max number of samples that will be stored in the raw data buffer for this signal"
                      },
                      "maxSizePerSample": {
                        "type": "integer",
                        "description": "Max size (bytes) of memory that can be used by a single sample of this signal. Larger samples will be discarded."
                      },
                      "maxSize": {
                        "type": "integer",
                        "description": "Max size (bytes) of memory that can be used for this signal"
                      }
                    },
                    "required": ["interfaceId", "messageId"]
                  }
                }
              }
            }
          }
        }
      },
      "required": [
        "bufferSizes",
        "threadIdleTimes",
        "persistency",
        "internalParameters",
        "publishToCloudParameters",
        "mqttConnection"
      ]
    }
  },
  "required": ["version", "networkInterfaces", "staticConfig"]
}
