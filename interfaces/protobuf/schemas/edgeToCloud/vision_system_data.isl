// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// VERSION 1.0.1

$ion_schema_2_0

schema_header::{
}
/*
 * Metadata for collected data for one triggered event.
 */
type::{
    name:Metadata,
    type:struct,
    fields:{
        /*
         * Ion scheme version used to collect data.
         */
        ion_scheme_version:{
            type:string,
            occurs:required
        },
        /*
         * Name of the vehicle that collected data.
         */
        vehicle_name:{
            type:string,
            occurs:required
        },
        /*
         * Synchronization ID of the campaign that triggered the collection of the data.
         */
        campaign_sync_id:{
            type:string,
            occurs:required
        },
        /*
         * Synchronization ID of the decoder manifest used to decode the signals.
         */
        decoder_sync_id:{
            type:string,
            occurs:required
        },
        /*
         * A unique ID that FWE generates each time a collectionScheme condition is triggered.
         * ION INT can be 64bit long.
         */
        collection_event_id:{
            type:int,
            occurs:required
        },
        /*
         * The absolute timestamp in microseconds since Unix Epoch of when the event was triggered.
         */
        collection_event_time:{
            type:int,
            occurs:required
        }
    }
}
/*
 * Captured data for each signal. This container is repeated if there are multiple signals collected in the event.
 */
type::{
    name:CapturedSignal,
    type:struct,
    fields:{
        /*
         * Unique integer identifier of the signal generated by Cloud Designer.
         */
        signal_id:{
            type:int,
            occurs:required
        },
        /*
         * Signal name if one exists for vision system data. E.g. ROS2 topic name.
         */
        signal_name:{
            type:string
        },
        /*
         * Signal type if one exists for vision system data. E.g. ROS2 topic type.
         */
        signal_type:{
            type:string
        },
        /*
         * microseconds relative to the collection_event_time. Can be negative or positive.
         */
        relative_time:{
            type:int,
            occurs:required
        },
        /*
         * Data serialization format
         */
        data_format:{
            type:symbol,
            valid_values:[
                CDR
            ],
            occurs:required
        },
        /*
         * Binary blob of collected data
         */
        signal_byte_values:{
            type:blob,
            occurs:required
        }
    }
}
schema_footer::{
}
