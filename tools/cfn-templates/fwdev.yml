# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Ec2InstanceType:
    Description: Type of EC2 instance
    Type: String
    Default: m6g.2xlarge
    AllowedValues:
      - m6g.medium
      - m6g.large
      - m6g.xlarge
      - m6g.2xlarge
      - m6g.4xlarge
      - m6g.8xlarge
      - m6g.12xlarge
      - m6g.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
  Ec2KeyPair:
    Description: Name of SSH key pair (required)
    Type: String
    ConstraintDescription:
      "Must be the 'Name' of an SSH key pair from here
      https://console.aws.amazon.com/ec2/v2/home#KeyPairs:"
    AllowedPattern: ".+"
  Ec2VolumeSize:
    Description: Size of storage space in GB
    Type: String
    Default: 500
Resources:
  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance security group
  Ec2SecurityGroupSshIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow inbound SSH access
      GroupId: !GetAtt Ec2SecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: "0.0.0.0/0"
  Ec2SecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow access in same security group
      GroupId: !GetAtt Ec2SecurityGroup.GroupId
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt Ec2SecurityGroup.GroupId
  Ec2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-EC2-ServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Ec2ServiceRole
  Ec2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-EC2-LaunchTemplate
      LaunchTemplateData:
        ImageId: !FindInMap
          - !FindInMap
            - InstanceArchMap
            - !Ref Ec2InstanceType
            - AmiRegionMap
          - !Ref "AWS::Region"
          - AMIID
        KeyName: !Ref Ec2KeyPair
        InstanceType: !Ref Ec2InstanceType
        IamInstanceProfile:
          Name: !Ref Ec2InstanceProfile
        SecurityGroupIds: !Split [",", !GetAtt Ec2SecurityGroup.GroupId]
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${AWS::StackName}-Ec2-Instance
        MetadataOptions:
          HttpEndpoint: "enabled"
          HttpTokens: "required"
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: !Ref Ec2VolumeSize
              DeleteOnTermination: true
              Encrypted: true
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash
              set -xeuo pipefail

              # Disable unattended upgrades
              systemctl stop unattended-upgrades
              systemctl disable unattended-upgrades

              print_process_tree(){
                ps axjf # Print process tree in case apt lock was still taken
              }
              trap print_process_tree ERR

              # Upgrade system and reboot if required
              apt-get update
              apt-get dist-upgrade -y
              if [ -f /var/run/reboot-required ]; then
                # Delete the UserData info file so that we run again after reboot
                rm -f /var/lib/cloud/instances/*/sem/config_scripts_user
                reboot
                exit
              fi

              # Install helper scripts:
              apt-get update
              apt-get install -y python3-setuptools
              apt-get install -y python3-pip
              mkdir -p /opt/aws/bin
              cd /tmp
              wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
              tar -xvzf aws-cfn-bootstrap-py3-latest.tar.gz
              rm -rf aws-cfn-bootstrap-py3-latest.tar.gz
              cd aws-cfn-bootstrap-*
              python3 setup.py install

              # Create symlinks in /opt/aws/bin
              ln -s /usr/local/bin/cfn-* /opt/aws/bin/

              # On error, signal back to cfn:
              error_handler() {
                print_process_tree
                /opt/aws/bin/cfn-signal --success false --stack ${AWS::StackName} --resource Ec2Instance --region ${AWS::Region}
              }
              trap error_handler ERR

              # Install packages
              apt-get update
              apt-get install -y ec2-instance-connect htop jq unzip zip

              # Install AWS CLI:
              curl "https://awscli.amazonaws.com/awscli-exe-linux-${Arch}.zip" -o "awscliv2.zip"
              unzip -q awscliv2.zip
              ./aws/install
              rm awscliv2.zip

              # Signal init complete:
              /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --resource Ec2Instance --region ${AWS::Region}

            - Arch: !FindInMap [InstanceArchMap, !Ref Ec2InstanceType, Arch]
  Ec2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref Ec2LaunchTemplate
        Version: !GetAtt Ec2LaunchTemplate.LatestVersionNumber
Mappings:
  InstanceArchMap:
    m6g.medium:
      AmiRegionMap: AMIRegionMapArm64
      Arch: aarch64
    m6g.large:
      AmiRegionMap: AMIRegionMapArm64
      Arch: aarch64
    m6g.xlarge:
      AmiRegionMap: AMIRegionMapArm64
      Arch: aarch64
    m6g.2xlarge:
      AmiRegionMap: AMIRegionMapArm64
      Arch: aarch64
    m6g.4xlarge:
      AmiRegionMap: AMIRegionMapArm64
      Arch: aarch64
    m6g.8xlarge:
      AmiRegionMap: AMIRegionMapArm64
      Arch: aarch64
    m6g.12xlarge:
      AmiRegionMap: AMIRegionMapArm64
      Arch: aarch64
    m6g.16xlarge:
      AmiRegionMap: AMIRegionMapArm64
      Arch: aarch64
    m5.large:
      AmiRegionMap: AMIRegionMapAmd64
      Arch: x86_64
    m5.xlarge:
      AmiRegionMap: AMIRegionMapAmd64
      Arch: x86_64
    m5.2xlarge:
      AmiRegionMap: AMIRegionMapAmd64
      Arch: x86_64
    m5.4xlarge:
      AmiRegionMap: AMIRegionMapAmd64
      Arch: x86_64
    m5.8xlarge:
      AmiRegionMap: AMIRegionMapAmd64
      Arch: x86_64
    m5.12xlarge:
      AmiRegionMap: AMIRegionMapAmd64
      Arch: x86_64
    m5.16xlarge:
      AmiRegionMap: AMIRegionMapAmd64
      Arch: x86_64
    m5.24xlarge:
      AmiRegionMap: AMIRegionMapAmd64
      Arch: x86_64
  # Ubuntu 22.04 arm64 AMIs
  AMIRegionMapArm64:
    ap-northeast-1:
      AMIID: ami-0ee8e95ead0dca661
    ap-northeast-2:
      AMIID: ami-00a088937d716687c
    ap-northeast-3:
      AMIID: ami-0cbbad1fc2e168407
    ap-south-1:
      AMIID: ami-0244982250389181c
    ap-southeast-1:
      AMIID: ami-0cc88864fb73db7ca
    ap-southeast-2:
      AMIID: ami-0338dcafe3533165c
    ca-central-1:
      AMIID: ami-061dcfbbbd74437d9
    eu-central-1:
      AMIID: ami-0acaf26b4cb01a28f
    eu-north-1:
      AMIID: ami-004c0b94e90d754e9
    eu-west-1:
      AMIID: ami-0188c9e933ae9ab85
    eu-west-2:
      AMIID: ami-035ca720c91837232
    eu-west-3:
      AMIID: ami-01aa84e981e543a95
    sa-east-1:
      AMIID: ami-018fe133694261581
    us-east-1:
      AMIID: ami-09beddbdedb753836
    us-east-2:
      AMIID: ami-00e57671b1e642110
    us-west-1:
      AMIID: ami-02c7d55c9769836a7
    us-west-2:
      AMIID: ami-0eb53bcf5e769629f
  # Ubuntu 22.04 amd64 AMIs
  AMIRegionMapAmd64:
    ap-northeast-1:
      AMIID: ami-09013b9396188007c
    ap-northeast-2:
      AMIID: ami-0150dbdc27740973d
    ap-northeast-3:
      AMIID: ami-0629e2d14856d6767
    ap-south-1:
      AMIID: ami-0900588ae829985de
    ap-southeast-1:
      AMIID: ami-0e0ddf453092e1e37
    ap-southeast-2:
      AMIID: ami-04ef3e7a4887df9fd
    ca-central-1:
      AMIID: ami-055e41a9eeb19ebbe
    eu-central-1:
      AMIID: ami-0ef7e778d25af6645
    eu-north-1:
      AMIID: ami-03b371d239dfe4af4
    eu-west-1:
      AMIID: ami-0dc0ac921efee9f9d
    eu-west-2:
      AMIID: ami-06b6e5258935d111e
    eu-west-3:
      AMIID: ami-0388f26d76e0472c6
    sa-east-1:
      AMIID: ami-0816eee6501be9e04
    us-east-1:
      AMIID: ami-05ec1e5f7cfe5ef59
    us-east-2:
      AMIID: ami-08ad03b8ba2eba82f
    us-west-1:
      AMIID: ami-0fa9de2bba4d18c53
    us-west-2:
      AMIID: ami-02de260c9d93d7b98
Outputs:
  Ec2InstanceId:
    Description: "EC2 instance ID"
    Value: !Ref Ec2Instance
  Ec2InstancePublicIp:
    Description: "EC2 instance public IP address"
    Value: !GetAtt Ec2Instance.PublicIp
