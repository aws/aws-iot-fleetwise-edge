# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Ec2InstanceType:
    Description: Type of EC2 instance
    Type: String
    Default: m6g.2xlarge
    AllowedValues:
      - m6g.medium
      - m6g.large
      - m6g.xlarge
      - m6g.2xlarge
      - m6g.4xlarge
      - m6g.8xlarge
      - m6g.12xlarge
      - m6g.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
  Ec2KeyPair:
    Description: Name of SSH key pair (required)
    Type: String
    ConstraintDescription:
      "Must be the 'Name' of an SSH key pair from here
      https://console.aws.amazon.com/ec2/v2/home#KeyPairs:"
    AllowedPattern: ".+"
  Ec2VolumeSize:
    Description: Size of storage space in GB
    Type: String
    Default: 500
Resources:
  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance security group
  Ec2SecurityGroupSshIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow inbound SSH access
      GroupId: !GetAtt Ec2SecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: "0.0.0.0/0"
  Ec2SecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow access in same security group
      GroupId: !GetAtt Ec2SecurityGroup.GroupId
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt Ec2SecurityGroup.GroupId
  Ec2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-EC2-ServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Ec2ServiceRole
  Ec2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-EC2-LaunchTemplate
      LaunchTemplateData:
        ImageId: !FindInMap
          - !FindInMap
            - InstanceArchMap
            - !Ref Ec2InstanceType
            - AmiRegionMap
          - !Ref "AWS::Region"
          - AMIID
        KeyName: !Ref Ec2KeyPair
        InstanceType: !Ref Ec2InstanceType
        IamInstanceProfile:
          Name: !Ref Ec2InstanceProfile
        SecurityGroupIds: !Split [",", !GetAtt Ec2SecurityGroup.GroupId]
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${AWS::StackName}-Ec2-Instance
        MetadataOptions:
          HttpEndpoint: "enabled"
          HttpTokens: "required"
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: !Ref Ec2VolumeSize
              DeleteOnTermination: true
              Encrypted: true
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash
              set -xeuo pipefail

              # Disable unattended upgrades
              systemctl stop unattended-upgrades
              systemctl disable unattended-upgrades

              print_process_tree(){
                ps axjf # Print process tree in case apt lock was still taken
              }
              trap print_process_tree ERR

              # Upgrade system and reboot if required
              apt update
              apt upgrade -y
              if [ -f /var/run/reboot-required ]; then
                # Delete the UserData info file so that we run again after reboot
                rm -f /var/lib/cloud/instances/*/sem/config_scripts_user
                reboot
                exit
              fi

              # Install helper scripts:
              apt update
              apt install -y python3-setuptools
              mkdir -p /opt/aws/bin
              wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
              python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz
              rm aws-cfn-bootstrap-py3-latest.tar.gz

              # On error, signal back to cfn:
              error_handler() {
                print_process_tree
                /opt/aws/bin/cfn-signal --success false --stack ${AWS::StackName} --resource Ec2Instance --region ${AWS::Region}
              }
              trap error_handler ERR

              # Install packages
              apt update
              apt install -y ec2-instance-connect htop jq unzip zip

              # Install AWS CLI:
              curl "https://awscli.amazonaws.com/awscli-exe-linux-${Arch}.zip" -o "awscliv2.zip"
              unzip -q awscliv2.zip
              ./aws/install
              rm awscliv2.zip

              # Signal init complete:
              /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --resource Ec2Instance --region ${AWS::Region}

            - Arch: !FindInMap [InstanceArchMap, !Ref Ec2InstanceType, Arch]
  Ec2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref Ec2LaunchTemplate
        Version: !GetAtt Ec2LaunchTemplate.LatestVersionNumber
Mappings:
  InstanceArchMap:
    m6g.medium:
      AmiRegionMap: AMIRegionMapArm64
      Arch: aarch64
    m6g.large:
      AmiRegionMap: AMIRegionMapArm64
      Arch: aarch64
    m6g.xlarge:
      AmiRegionMap: AMIRegionMapArm64
      Arch: aarch64
    m6g.2xlarge:
      AmiRegionMap: AMIRegionMapArm64
      Arch: aarch64
    m6g.4xlarge:
      AmiRegionMap: AMIRegionMapArm64
      Arch: aarch64
    m6g.8xlarge:
      AmiRegionMap: AMIRegionMapArm64
      Arch: aarch64
    m6g.12xlarge:
      AmiRegionMap: AMIRegionMapArm64
      Arch: aarch64
    m6g.16xlarge:
      AmiRegionMap: AMIRegionMapArm64
      Arch: aarch64
    m5.large:
      AmiRegionMap: AMIRegionMapAmd64
      Arch: aarch64
    m5.xlarge:
      AmiRegionMap: AMIRegionMapAmd64
      Arch: x86_64
    m5.2xlarge:
      AmiRegionMap: AMIRegionMapAmd64
      Arch: x86_64
    m5.4xlarge:
      AmiRegionMap: AMIRegionMapAmd64
      Arch: x86_64
    m5.8xlarge:
      AmiRegionMap: AMIRegionMapAmd64
      Arch: x86_64
    m5.12xlarge:
      AmiRegionMap: AMIRegionMapAmd64
      Arch: x86_64
    m5.16xlarge:
      AmiRegionMap: AMIRegionMapAmd64
      Arch: x86_64
    m5.24xlarge:
      AmiRegionMap: AMIRegionMapAmd64
      Arch: x86_64
  # Ubuntu 20.04 arm64 AMIs
  AMIRegionMapArm64:
    ap-northeast-1:
      AMIID: ami-0b0746f258294d579
    ap-northeast-2:
      AMIID: ami-02bb63f25623be6a5
    ap-northeast-3:
      AMIID: ami-0f36f6a01cf003323
    ap-south-1:
      AMIID: ami-0220b23b02dcd7472
    ap-southeast-1:
      AMIID: ami-042165b0543f0ee50
    ap-southeast-2:
      AMIID: ami-016e8b2be3ed7321e
    ca-central-1:
      AMIID: ami-05f568c35d0a96179
    eu-central-1:
      AMIID: ami-0f87c5201e047e11b
    eu-north-1:
      AMIID: ami-0323408b68ffad5bb
    eu-west-1:
      AMIID: ami-04f0b66bc81784626
    eu-west-2:
      AMIID: ami-059b0d19b2a216c1c
    eu-west-3:
      AMIID: ami-0ec91324f8291f6d9
    sa-east-1:
      AMIID: ami-0f89fce798bed5bd8
    us-east-1:
      AMIID: ami-0ca0034f838ce18c6
    us-east-2:
      AMIID: ami-0db71bb387bb47853
    us-west-1:
      AMIID: ami-0a4cb059a5d26a7e7
    us-west-2:
      AMIID: ami-0e12dfe7437a61feb
  # Ubuntu 20.04 amd64 AMIs
  AMIRegionMapAmd64:
    ap-northeast-1:
      AMIID: ami-0a5d789f51005e017
    ap-northeast-2:
      AMIID: ami-08df3100bf18ce27f
    ap-northeast-3:
      AMIID: ami-00880873dc92cb2bd
    ap-south-1:
      AMIID: ami-0ec5741cef7cccfa1
    ap-southeast-1:
      AMIID: ami-094a05f758cfa0c85
    ap-southeast-2:
      AMIID: ami-09ac1f936d01ad8a0
    ca-central-1:
      AMIID: ami-07e9398c3d79d0a53
    eu-central-1:
      AMIID: ami-0a0bfc6462a1bba50
    eu-north-1:
      AMIID: ami-006a6296aa17e4546
    eu-west-1:
      AMIID: ami-0520e200eb4f308f2
    eu-west-2:
      AMIID: ami-093026fc8263198b0
    eu-west-3:
      AMIID: ami-0cc56a88164d6391b
    sa-east-1:
      AMIID: ami-0ec1e6f31a5c70e13
    us-east-1:
      AMIID: ami-0069aa073aac75299
    us-east-2:
      AMIID: ami-014d2a8190b1bdeb4
    us-west-1:
      AMIID: ami-02fd5efc30e766ac2
    us-west-2:
      AMIID: ami-057439a71140a950c
Outputs:
  Ec2InstanceId:
    Description: "EC2 instance ID"
    Value: !Ref Ec2Instance
  Ec2InstancePublicIp:
    Description: "EC2 instance public IP address"
    Value: !GetAtt Ec2Instance.PublicIp
