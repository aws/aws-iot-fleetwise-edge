# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  RoleAlias:
    Description: Alias of role used by AWS IoT Core credentials provider
    Type: String
    Default: credentials-provider-role
  S3BucketName:
    Description: Name of existing S3 bucket for uploaded signal data
    Type: String
    ConstraintDescription: "Must be the name of an existing S3 bucket"
    AllowedPattern: ".+"
  S3BucketPrefixPattern:
    Description:
      Allowed S3 bucket prefix pattern. Can include AWS IoT Credentials Provider policy variables.
    Type: String
    Default: "*raw-data/${credentials-iot:ThingName}/*"
  IoTCoreRegion:
    Description: "Region in which IoT Things are provisioned"
    Type: String
    Default: "us-east-1"
  IoTCoreEndpointUrl:
    Description: "Endpoint URL for IoT Core (leave blank for automatic)"
    Type: String
    Default: ""
Resources:
  CredentialsProviderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: credentials.iot.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-CredentialsProviderPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                Resource:
                  - !Sub arn:aws:s3:::${S3BucketName}
                  - !Sub arn:aws:s3:::${S3BucketName}/${S3BucketPrefixPattern}
  CredentialsProviderRoleAlias:
    Type: Custom::RoleAlias
    Properties:
      ServiceToken: !GetAtt CreateRoleAliasFunction.Arn
      IoTCoreRegion: !Ref IoTCoreRegion
      IoTCoreEndpointUrl: !Ref IoTCoreEndpointUrl
  CreateRoleAliasFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Creates an IoT Role Alias
      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Code:
        ZipFile: !Sub |
          import sys
          import cfnresponse
          import boto3
          from botocore.exceptions import ClientError
          import json
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              responseData = {}
              try:
                  logger.info('Received event: {}'.format(json.dumps(event)))
                  result = cfnresponse.FAILED
                  iotCoreEndpointUrl=event['ResourceProperties']['IoTCoreEndpointUrl']
                  iotCoreRegion=event['ResourceProperties']['IoTCoreRegion']
                  client = boto3.client(
                      'iot',
                      endpoint_url=None if iotCoreEndpointUrl=='' else iotCoreEndpointUrl,
                      region_name=iotCoreRegion)
                  if event['RequestType'] == 'Create':
                      logger.info('Creating role alias...')
                      client.create_role_alias(
                          roleAlias='${RoleAlias}',
                          roleArn='${CredentialsProviderRole.Arn}')
                      result = cfnresponse.SUCCESS
                  elif event['RequestType'] == 'Update':
                      result = cfnresponse.SUCCESS
                  elif event['RequestType'] == 'Delete':
                      logger.info('Deleting role alias...')
                      client.delete_role_alias(
                          roleAlias='${RoleAlias}')
                      result = cfnresponse.SUCCESS
              except ClientError as e:
                  logger.error('Error: {}'.format(e))
                  result = cfnresponse.FAILED
              logger.info('Returning response of: {}, with result of: {}'.format(result, responseData))
              sys.stdout.flush()
              cfnresponse.send(event, context, result, responseData)
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - "iot:CreateRoleAlias"
                  - "iot:DeleteRoleAlias"
                  - "iam:PassRole"
                Resource:
                  - !Sub arn:aws:iot:${IoTCoreRegion}:${AWS::AccountId}:rolealias/${RoleAlias}
                  - !Sub ${CredentialsProviderRole.Arn}
