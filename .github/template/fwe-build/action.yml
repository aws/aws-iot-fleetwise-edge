# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

name: Build FWE

inputs:
  build-arch:
    required: true
  upload-arch:
    required: true
  extra-options:
    required: false
  dist-name:
    required: true
  cache-paths:
    required: true
  dist-files:
    required: true

runs:
  using: "composite"
  steps:
    - name: cache-deps
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: cache
        # prettier-ignore
        key: ${{ inputs.dist-name }}-${{ inputs.build-arch }}-${{ hashFiles('tools/install-deps-*.sh') }}

    - name: restore-cache-deps
      # Explicitly checking against true as the cache-hit output is a string value : "true", "false"
      # or "". According to GitHub documentation : https://github.com/marketplace/actions/cache#outputs,
      # it returns 'true' only on an exact primary key match, 'false' when using fallback restore-keys, and an
      # empty string when no cache exists at all. In the current workflow configuration, cache-hit output would
      # either return a "" when the cache is not available or a "true" if there is an exact key match.
      if: steps.cache-deps.outputs.cache-hit == 'true'
      shell: bash
      run: |
        echo "Cache found! Restoring cached dependencies..."
        IFS=":"
        CACHE_PATHS=${{ inputs.cache-paths }}
        for P in ${CACHE_PATHS}; do
          sudo mkdir -p `dirname ${P}`
          sudo cp -r cache${P} ${P}
        done

    - name: install-deps
      shell: bash
      run: |
        # Add --use-cache flag if cache hit
        EXTRA_OPTIONS="${{ inputs.extra-options }}"
        # Explicitly checking against true as the cache-hit output is a string value : "true", "false" or ""
        if [[ "${{ steps.cache-deps.outputs.cache-hit }}" == 'true' ]]; then
          echo "Using cached dependencies, adding --use-cache flag"
          EXTRA_OPTIONS="${EXTRA_OPTIONS} --use-cache"
        else
          echo "No cache hit, installing dependencies from scratch"
        fi

        echo "Running installation with options: ${EXTRA_OPTIONS}"
        sudo ./tools/install-deps-${{ inputs.build-arch }}.sh ${EXTRA_OPTIONS}

    - name: create-cache
      # Explicitly checking against "" as the cache-hit output is a string value : "true", "false"
      # or "". According to GitHub documentation : https://github.com/marketplace/actions/cache#outputs,
      # it returns 'true' only on an exact primary key match, 'false' when using fallback restore-keys, and an
      # empty string when no cache exists at all. In the current workflow configuration, cache-hit output would
      # either return a "" when the cache is not available or a "true" if there is an exact key match.
      if: steps.cache-deps.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Creating cache for future runs..."
        IFS=":"
        CACHE_PATHS=${{ inputs.cache-paths }}
        for P in ${CACHE_PATHS}; do
          sudo mkdir -p "$(dirname "cache${P}")"
          sudo cp -r "${P}" "cache${P}"
        done

    - name: build
      shell: bash
      run: |
        ./tools/build-fwe-${{ inputs.build-arch }}.sh ${{ inputs.extra-options }}
        ./tools/build-dist.sh ${{ inputs.dist-files }}
        # If the output file changes, make sure to update the upload-asset job below
        mv build/aws-iot-fleetwise-edge.tar.gz build/${{ inputs.dist-name }}-${{ inputs.upload-arch }}.tar.gz
        if [ "${{ inputs.dist-name }}" == "aws-iot-fleetwise-edge-ros2" ]; then
          tar --exclude /opt/ros/humble/include --exclude /opt/ros/humble/cmake -zcf build/opt.tar.gz /opt/ros
        fi

    - name: unit-test
      shell: bash
      if: inputs.build-arch  == 'native'
      run: |
        PYTEST_ADDOPTS='-k "not (CANDataSourceTest or ISOTPOverCANProtocolTest or IoTFleetWiseEngineTest or OBDOverCANModuleTest or CanCommandDispatcherTest or UDSTemplateInterfaceTest)"' \
          ./tools/test-fwe.sh ${{ inputs.extra-options }}
    - name: upload-artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.dist-name }}-${{ inputs.upload-arch }}
        path: |
          build/aws-iot-fleetwise-edge
          build/iotfleetwise/aws-iot-fleetwise-edge
          build/${{ inputs.dist-name }}-${{ inputs.upload-arch }}.tar.gz
          build/Testing/Temporary/
          build/**/report-*.xml
          build/**/html_report/
          build/opt.tar.gz

    - name: upload-asset
      if: github.ref_type == 'tag'
      shell: bash
      run: |
        RELEASE_VERSION="${GITHUB_REF/refs\/tags\//}"
        gh release upload ${RELEASE_VERSION} build/${{ inputs.dist-name }}-${{ inputs.upload-arch }}.tar.gz
