---
Checks: >
  #disable all rules first and then enable necessary ones
    -*,
    -clang-analyzer-apiModeling.StdCLibraryFunctions,
    -clang-analyzer-apiModeling.TrustNonnull,
    -clang-analyzer-apiModeling.google.GTest,
    -clang-analyzer-apiModeling.llvm.CastValue,
    -clang-analyzer-apiModeling.llvm.ReturnValue,
    clang-analyzer-core.CallAndMessage,
    clang-analyzer-core.DivideZero,
    clang-analyzer-core.DynamicTypePropagation,
    clang-analyzer-core.NonNullParamChecker,
    clang-analyzer-core.NonnilStringConstants,
    clang-analyzer-core.NullDereference,
    clang-analyzer-core.StackAddrEscapeBase,
    clang-analyzer-core.StackAddressEscape,
    clang-analyzer-core.UndefinedBinaryOperatorResult,
    clang-analyzer-core.VLASize,
    clang-analyzer-core.builtin.BuiltinFunctions,
    clang-analyzer-core.builtin.NoReturnFunctions,
    clang-analyzer-core.uninitialized.ArraySubscript,
    clang-analyzer-core.uninitialized.Assign,
    clang-analyzer-core.uninitialized.Branch,
    clang-analyzer-core.uninitialized.CapturedBlockVariable,
    clang-analyzer-core.uninitialized.UndefReturn,
    clang-analyzer-cplusplus.InnerPointer,
    clang-analyzer-cplusplus.Move,
    clang-analyzer-cplusplus.NewDelete,
    -clang-analyzer-cplusplus.NewDeleteLeaks, # Disabled due to false positives from boost headers
    clang-analyzer-cplusplus.PureVirtualCall,
    clang-analyzer-cplusplus.SelfAssignment,
    clang-analyzer-cplusplus.SmartPtr,
    clang-analyzer-cplusplus.VirtualCallModeling,
    clang-analyzer-deadcode.DeadStores,
    clang-analyzer-fuchsia.HandleChecker,
    -fuchsia-multiple-inheritance, # We need to fix the occurences and enable
    fuchsia-virtual-inheritance,
    clang-analyzer-nullability.NullPassedToNonnull,
    clang-analyzer-nullability.NullReturnedFromNonnull,
    clang-analyzer-nullability.NullabilityBase,
    clang-analyzer-nullability.NullableDereferenced,
    clang-analyzer-nullability.NullablePassedToNonnull,
    clang-analyzer-nullability.NullableReturnedFromNonnull,
    clang-analyzer-optin.cplusplus.UninitializedObject,
    clang-analyzer-optin.cplusplus.VirtualCall,
    -clang-analyzer-optin.mpi.MPI-Checker,
    clang-analyzer-optin.osx.OSObjectCStyleCast,
    -clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker,
    -clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker,
    clang-analyzer-optin.performance.GCDAntipattern,
    clang-analyzer-optin.performance.Padding,
    clang-analyzer-optin.portability.UnixAPI,
    -clang-analyzer-osx*,
    clang-analyzer-security.FloatLoopCounter,
    clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,
    clang-analyzer-security.insecureAPI.SecuritySyntaxChecker,
    clang-analyzer-security.insecureAPI.UncheckedReturn,
    clang-analyzer-security.insecureAPI.bcmp,
    clang-analyzer-security.insecureAPI.bcopy,
    clang-analyzer-security.insecureAPI.bzero,
    clang-analyzer-security.insecureAPI.decodeValueOfObjCType,
    clang-analyzer-security.insecureAPI.getpw,
    clang-analyzer-security.insecureAPI.gets,
    clang-analyzer-security.insecureAPI.mkstemp,
    clang-analyzer-security.insecureAPI.mktemp,
    clang-analyzer-security.insecureAPI.rand,
    clang-analyzer-security.insecureAPI.strcpy,
    clang-analyzer-security.insecureAPI.vfork,
    clang-analyzer-unix.API,
    clang-analyzer-unix.DynamicMemoryModeling,
    clang-analyzer-unix.Malloc,
    clang-analyzer-unix.MallocSizeof,
    clang-analyzer-unix.MismatchedDeallocator,
    clang-analyzer-unix.Vfork,
    clang-analyzer-unix.cstring.BadSizeArg,
    clang-analyzer-unix.cstring.CStringModeling,
    clang-analyzer-unix.cstring.NullArg,
    clang-analyzer-valist.CopyToSelf,
    clang-analyzer-valist.Uninitialized,
    clang-analyzer-valist.Unterminated,
    clang-analyzer-valist.ValistBase,
    # modernize rules. Need to enable relevant rules incrementally
    modernize-avoid-bind,
    -modernize-avoid-c-arrays,
    -modernize-concat-nested-namespaces,
    modernize-deprecated-headers,
    modernize-deprecated-ios-base-aliases,
    -modernize-loop-convert,
    modernize-make-shared,
    modernize-make-unique,
    modernize-pass-by-value,
    modernize-raw-string-literal,
    modernize-redundant-void-arg,
    modernize-replace-auto-ptr,
    modernize-replace-disallow-copy-and-assign-macro,
    modernize-replace-random-shuffle,
    modernize-return-braced-init-list,
    modernize-shrink-to-fit,
    -modernize-unary-static-assert,
    -modernize-use-auto,
    modernize-use-bool-literals,
    modernize-use-default-member-init,
    modernize-use-emplace,
    modernize-use-equals-default,
    modernize-use-equals-delete,
    -modernize-use-nodiscard,
    modernize-use-noexcept,
    modernize-use-nullptr,
    modernize-use-override,
    -modernize-use-trailing-return-type,
    -modernize-use-transparent-functors,
    modernize-use-uncaught-exceptions,
    modernize-use-using,
    #
    readability-avoid-const-params-in-decls,
    readability-braces-around-statements,
    readability-const-return-type,
    readability-container-size-empty,
    readability-convert-member-functions-to-static,
    readability-delete-null-pointer,
    readability-deleted-default,
    -readability-else-after-return,
    readability-function-size,
    readability-identifier-naming,
    readability-implicit-bool-conversion,
    readability-inconsistent-declaration-parameter-name,
    readability-isolate-declaration,
    -readability-magic-numbers,
    readability-make-member-function-const,
    readability-misleading-indentation,
    readability-misplaced-array-index,
    readability-named-parameter,
    readability-non-const-parameter,
    -readability-qualified-auto,
    readability-redundant-access-specifiers,
    readability-redundant-control-flow,
    readability-redundant-declaration,
    readability-redundant-function-ptr-dereference,
    readability-redundant-member-init,
    readability-redundant-preprocessor,
    readability-redundant-smartptr-get,
    -readability-redundant-string-cstr,
    readability-redundant-string-init,
    -readability-simplify-boolean-expr,
    readability-simplify-subscript-expr,
    readability-static-accessed-through-instance,
    readability-static-definition-in-anonymous-namespace,
    readability-string-compare,
    readability-uniqueptr-delete-release,
    -readability-uppercase-literal-suffix,
    # boost-use-to-string,
    # bugprone-argument-comment,
    # bugprone-assert-side-effect,
    # bugprone-bad-signal-to-kill-thread,
    # bugprone-bool-pointer-implicit-conversion,
    # bugprone-branch-clone,
    bugprone-copy-constructor-init,
    # bugprone-dangling-handle,
    # bugprone-dynamic-static-initializers,
    # bugprone-exception-escape,
    # bugprone-fold-init-type,
    # bugprone-forward-declaration-namespace,
    bugprone-forwarding-reference-overload,
    # bugprone-inaccurate-erase,
    # bugprone-incorrect-roundings,
    # bugprone-infinite-loop,
    # bugprone-integer-division,
    # bugprone-lambda-function-name,
    bugprone-macro-parentheses,
    # bugprone-macro-repeated-side-effects,
    # bugprone-misplaced-operator-in-strlen-in-alloc,
    # bugprone-misplaced-widening-cast,
    bugprone-move-forwarding-reference,
    # bugprone-multiple-statement-macro,
    # bugprone-narrowing-conversions,
    # bugprone-not-null-terminated-result,
    # bugprone-parent-virtual-call,
    # bugprone-posix-return,
    # bugprone-signed-char-misuse,
    # bugprone-sizeof-container,
    # bugprone-sizeof-expression,
    # bugprone-string-constructor,
    # bugprone-string-integer-assignment,
    # bugprone-string-literal-with-embedded-nul,
    # bugprone-suspicious-enum-usage,
    # bugprone-suspicious-memset-usage,
    # bugprone-suspicious-missing-comma,
    # bugprone-suspicious-semicolon,
    # bugprone-suspicious-string-compare,
    bugprone-swapped-arguments,
    # bugprone-terminating-continue,
    # bugprone-throw-keyword-missing,
    # bugprone-too-small-loop-variable,
    # bugprone-undefined-memory-manipulation,
    # bugprone-undelegated-constructor,
    # bugprone-unhandled-self-assignment,
    # bugprone-unused-raii,
    # bugprone-unused-return-value,
    bugprone-use-after-move,
    # bugprone-virtual-near-miss,
    #
    cert-dcl03-c,
    -cert-dcl16-c,
    cert-dcl21-cpp,
    -cert-dcl50-cpp,
    cert-dcl54-cpp,
    -cert-dcl58-cpp,
    cert-dcl59-cpp,
    cert-env33-c,
    cert-err09-cpp,
    -cert-err34-c,
    cert-err52-cpp,
    -cert-err58-cpp,
    cert-err60-cpp,
    cert-err61-cpp,
    cert-fio38-c,
    cert-flp30-c,
    cert-mem57-cpp,
    cert-msc30-c,
    cert-msc32-c,
    cert-msc50-cpp,
    cert-msc51-cpp,
    cert-oop11-cpp,
    cert-oop54-cpp,
    cert-oop58-cpp,
    cert-pos44-c,
    #

    # clang-analyzer-unix.cstring.BadSizeArg,
    # clang-analyzer-unix.cstring.CStringModeling,
    # clang-analyzer-unix.cstring.NullArg,
    # clang-analyzer-valist.CopyToSelf,
    # clang-analyzer-valist.Uninitialized,
    # clang-analyzer-valist.Unterminated,
    # clang-analyzer-valist.ValistBase,
    #
    cppcoreguidelines-avoid-c-arrays,
    cppcoreguidelines-avoid-goto,
    -cppcoreguidelines-avoid-magic-numbers,
    cppcoreguidelines-avoid-non-const-global-variables,
    cppcoreguidelines-c-copy-assignment-signature,
    cppcoreguidelines-explicit-virtual-functions,
    cppcoreguidelines-init-variables,
    cppcoreguidelines-interfaces-global-init,
    -cppcoreguidelines-macro-usage,
    cppcoreguidelines-narrowing-conversions,
    cppcoreguidelines-no-malloc,
    -cppcoreguidelines-non-private-member-variables-in-classes,
    -cppcoreguidelines-owning-memory,
    -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
    -cppcoreguidelines-pro-bounds-constant-array-index,
    -cppcoreguidelines-pro-bounds-pointer-arithmetic,
    cppcoreguidelines-pro-type-const-cast,
    cppcoreguidelines-pro-type-cstyle-cast,
    -cppcoreguidelines-pro-type-member-init, # too many false positive
    -cppcoreguidelines-pro-type-reinterpret-cast,
    cppcoreguidelines-pro-type-static-cast-downcast,
    -cppcoreguidelines-pro-type-union-access,
    -cppcoreguidelines-pro-type-vararg,
    cppcoreguidelines-slicing,
    cppcoreguidelines-special-member-functions,
    #
    # google-readability-avoid-underscore-in-googletest-name,
    # google-readability-braces-around-statements,
    # google-readability-casting,
    # google-readability-function-size,
    # google-readability-namespace-comments,
    # google-readability-todo,
    # google-runtime-int,
    # google-runtime-operator,
    # google-runtime-references,
    -zircon-temporary-objects
# Turn all the warnings from the checks above into errors.
WarningsAsErrors: "*"
CheckOptions:
  - key: cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor
    value: "1"
  - key: readability-identifier-naming.NamespaceCase
    value: CamelCase
  - key: readability-identifier-naming.ClassCase
    value: CamelCase
  - key: readability-identifier-naming.StructCase
    value: CamelCase
  - key: readability-identifier-naming.TemplateParameterCase
    value: CamelCase
#  - key: readability-identifier-naming.ClassMemberPrefix
#    value: m
#  - key: readability-identifier-naming.ClassMemberCase
#    value: CamelCase
#   - { key: readability-identifier-naming.FunctionCase,           value: aNy_CasE  }
#   - { key: readability-identifier-naming.VariableCase,           value: lower_case }
#   - { key: readability-identifier-naming.PrivateMemberSuffix,    value: _          }
#   - { key: readability-identifier-naming.ProtectedMemberSuffix,  value: _          }
#   - { key: readability-identifier-naming.EnumConstantCase,         value: CamelCase }
#   - { key: readability-identifier-naming.EnumConstantPrefix,       value: k         }
#   - { key: readability-identifier-naming.ConstexprVariableCase,    value: CamelCase }
#   - { key: readability-identifier-naming.ConstexprVariablePrefix,  value: k         }
#   - { key: readability-identifier-naming.GlobalConstantCase,       value: CamelCase }
#   - { key: readability-identifier-naming.GlobalConstantPrefix,     value: k         }
#   - { key: readability-identifier-naming.MemberConstantCase,       value: CamelCase }
#   - { key: readability-identifier-naming.MemberConstantPrefix,     value: k         }
#   - { key: readability-identifier-naming.StaticConstantCase,       value: CamelCase }
#   - { key: readability-identifier-naming.StaticConstantPrefix,     value: k         }
#   - { key: readability-implicit-bool-conversion.AllowIntegerConditions,  value: 1   }
#   - { key: readability-implicit-bool-conversion.AllowPointerConditions,  value: 1   }
